root = true

# --- all files ---
[*]

indent_style = space

# --- XML project files ---
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]

indent_size = 2


# --- XML config files ---
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]

indent_size = 2

# --- C# code files ---
[*.{cs,csx}]

indent_size = 4
insert_final_newline = true
end_of_line = crlf
charset = utf-8

# --- C# conventions ---
[*.{cs}]

# place usings outside namespace
csharp_using_directive_placement = outside_namespace:silent

# Sort 'System.*' usings aplhabetically, and place them before other using directives
dotnet_sort_system_directives_first = true

# do not place a blank line between 'using' groups
dotnet_separate_import_directive_groups = false

# prefer X not to be prefaced with 'this.' ...
# ... for fields
dotnet_style_qualification_for_field = false:warning
# ... for properties
dotnet_style_qualification_for_property = false:warning
# ... for methods
dotnet_style_qualification_for_method = false:warning
# ... for events
dotnet_style_qualification_for_event = false:warning

# prefer language keywords over BCL type references (i.e. prefer 'int' over 'Int32') ...
# ... for local variables, parameters, members
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
# ... for accessing members of that type (i.e. 'int.MaxValue' over 'Int32.MaxValue')
dotnet_style_predefined_type_for_member_access = true:warning

# parantheses preferences...
# ... for binary operators (i.e. in 'var something = a + (b * c)')
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
# ... for relational binary operators (i.e. in 'var something = (a < b) == (c > d)')
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
# ... for other binary operators (i.e. in 'var something = a || (b && c)')
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
# ... for other operators (i.e. in 'var something = a.b.Length')
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# modifier preferences
dotnet_style_require_accessibility_modifiers = always:error
dotnet_style_readonly_field = true:error

# expression level preferences
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_inferred_tuple_names = false:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = false:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning

# parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# naming conventions

# style definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields.required_modifiers = const

# var preferences
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# expression bodied members
csharp_style_expression_bodied_methods = false:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_operators = false:warning
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = false:warning

# pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_prefer_switch_expression = true:warning

# null checking preferences
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning

# modifier preferences
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:warning
csharp_prefer_static_local_function = true:warning

# expression level preferences
csharp_prefer_braces = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_prefer_simple_default_expression = true:warning
csharp_style_prefer_local_over_anonymous_function = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_prefer_simple_using_statement = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:warning

# -- formatting conventions --

# new line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

# space preferences
csharp_space_after_cast = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.constant_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_should_be_pascal_case.symbols = constant
dotnet_naming_rule.constant_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_or_internal_static_field_should_be_static_field.severity = warning
dotnet_naming_rule.private_or_internal_static_field_should_be_static_field.symbols = private_or_internal_static_field
dotnet_naming_rule.private_or_internal_static_field_should_be_static_field.style = static_field

dotnet_naming_rule.private_or_internal_field_should_be_instance_field.severity = warning
dotnet_naming_rule.private_or_internal_field_should_be_instance_field.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_instance_field.style = instance_field

# symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_field.required_modifiers =

dotnet_naming_symbols.private_or_internal_static_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_static_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_static_field.required_modifiers = static

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.constant.applicable_kinds = field
dotnet_naming_symbols.constant.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.constant.required_modifiers = const

# naming styles

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.static_field.required_prefix =
dotnet_naming_style.static_field.required_suffix =
dotnet_naming_style.static_field.word_separator =
dotnet_naming_style.static_field.capitalization = camel_case

dotnet_naming_style.instance_field.required_prefix = _
dotnet_naming_style.instance_field.required_suffix =
dotnet_naming_style.instance_field.word_separator =
dotnet_naming_style.instance_field.capitalization = camel_case
